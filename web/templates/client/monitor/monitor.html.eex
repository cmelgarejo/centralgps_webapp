<link rel="stylesheet" href="<%= static_path(@conn, "/css/leaflet.css") %>">
<link rel="stylesheet" href="<%= static_path(@conn, "/css/leaflet.draw.css") %>">
<link rel="stylesheet" href="<%= static_path(@conn, "/css/leaflet.label.css") %>">
<link rel="stylesheet" href="<%= static_path(@conn, "/css/leaflet.awesome-markers.css") %>">
<link rel="stylesheet" href="<%= static_path(@conn, "/css/MarkerCluster.css") %>">
<link rel="stylesheet" href="<%= static_path(@conn, "/css/MarkerCluster.Default.css") %>">
<link rel="stylesheet" href="<%= static_path(@conn, "/css/leaflet.measurecontrol.css") %>">
<script src="<%= static_path(@conn, "/js/bootstrap-datetimepicker.min.js") %>"></script>
<script src="<%= static_path(@conn, "/js/leaflet-07.js") %>"></script>
<script src="<%= static_path(@conn, "/js/leaflet.markercluster.js") %>"></script>
<script src="<%= static_path(@conn, "/js/leaflet.edgemarker.js") %>"></script>
<script src="<%= static_path(@conn, "/js/leaflet.draw.js") %>"></script>
<script src="<%= static_path(@conn, "/js/leaflet.label.js") %>"></script>
<script src="<%= static_path(@conn, "/js/leaflet.awesome-markers.js") %>"></script>
<script src="<%= static_path(@conn, "/js/leaflet.measurecontrol.js") %>"></script>
<script src="<%= static_path(@conn, "/js/leaflet.osmgeocoder.js") %>"></script>
<!--TODO: Usar latest leaflet y observar Leaflet.markercluster (o arreglar) -->
<div role="tabpanel">
  <ul class="tab-nav tn-justified" role="tablist">
      <li><a href="#tab_asset_list" aria-controls="tab_asset_list" role="tab" data-toggle="tab"><%= l10n(@session.language_code, "monitor.html", "TABPANEL_ASSET_TEXT") %></a></li>
      <li><a href="#tab_event_list" aria-controls="tab_event_list" role="tab" data-toggle="tab"><%= l10n(@session.language_code, "monitor.html", "TABPANEL_EVENT_TEXT") %></a></li>
      <!-- <li><a href="#tab_history_list" aria-controls="tab_history_list" role="tab" data-toggle="tab"><%= l10n(@session.language_code, "monitor.html", "TABPANEL_HISTORY_TEXT") %></a></li> -->
      <li class="active"><a href="#tab_map" aria-controls="tab_map" role="tab" data-toggle="tab"><%= l10n(@session.language_code, "monitor.html", "TABPANEL_MAP_TEXT") %></a></li>
  </ul>
  <div class="tab-content">
    <div role="tabpanel" class="tab-pane" id="tab_asset_list">
      <div class="grid-container">
        <table id="asset_grid" class="table table-condensed table-hover table-striped">
            <thead>
                <tr>
                  <th data-column-id="name"><%= l10n(@session.language_code, "monitor.html", "COLUMN_ASSET_NAME") %></th>
                  <th data-column-id="address"><%= l10n(@session.language_code, "monitor.html", "COLUMN_ASSET_ADDRESS") %></th>
                  <th data-column-id="position_at" data-order="desc"><%= l10n(@session.language_code, "monitor.html", "COLUMN_ASSET_POSITION_AT") %></th>
                </tr>
            </thead>
        </table>
      </div>
    </div>
    <div role="tabpanel" class="tab-pane" id="tab_event_list">
      <div class="card lc-block">
        <div class="card-body card-padding">
          <div class="row">
            <div class="col-sm-4 col-md-4">
              <div class="input-group" style="width:100%">
                <div class="fg-line">
                  <select class="chosen-select form-control" id="_events_asset_list">
                  </select>
                </div>
              </div>
            </div>
            <div class="col-sm-3 col-md-3">
              <div class="form-group">
                <div class='input-group date'>
                  <span class="input-group-addon">
                      <i class="md md-event"></i>
                  </span>
                  <input id="_event_asset_start_dt" type='text' class="form-control date-time-picker"
                  placeholder="<%= l10n(@session.language_code, "generic", "START") %>"/>
                </div>
              </div>
            </div>
            <div class="col-sm-3 col-md-3">
              <div class="form-group">
                <div class='input-group date'>
                  <span class="input-group-addon">
                      <i class="md md-event"></i>
                  </span>
                  <input id="_event_asset_finish_dt" type='text' class="form-control date-time-picker"
                  placeholder="<%= l10n(@session.language_code, "generic", "FINISH") %>"/>
                </div>
              </div>
            </div>
            <div class="col-sm-2 col-md-2">
              <button class="btn btn-default" onclick="updateEvents()"><i class="md md-filter-list"></i>Filtrar</button>
            </div>
          </div>
          <div class="grid-container">
            <table id="event_grid" class="table table-condensed table-hover table-striped">
                <thead>
                    <tr>
                      <th data-column-id="asset_name"><%= l10n(@session.language_code, "monitor.html", "COLUMN_EVENT_ASSET") %></th>
                      <th data-column-id="event_text"><%= l10n(@session.language_code, "monitor.html", "COLUMN_EVENT_TEXT") %></th>
                      <th data-column-id="event_at" data-order="desc"><%= l10n(@session.language_code, "monitor.html", "COLUMN_EVENT_AT") %></th>
                    </tr>
                </thead>
            </table>
          </div>
        </div>
      </div>
    </div>
    <div role="tabpanel" class="tab-pane" id="tab_history_list">
      <div class="grid-container">
        <table id="history_grid" class="table table-condensed table-hover table-striped">
            <thead>
                <tr>
                  <th data-column-id="asset"><%= l10n(@session.language_code, "monitor.html",       "COLUMN_HISTORY_ASSET") %></th>
                  <th data-column-id="address"><%= l10n(@session.language_code, "monitor.html",     "COLUMN_HISTORY_ADDRESS") %></th>
                  <th data-column-id="position_at"><%= l10n(@session.language_code, "monitor.html", "COLUMN_HISTORY_POSITION_AT") %></th>
                </tr>
            </thead>
        </table>
      </div>
    </div>
    <div role="tabpanel" class="tab-pane active" id="tab_map">
      <div id="_asset_map"></div>
    </div>
  </div>
</div>
<script>
"use strict";
var marker_icon_colors = ['red', 'darkred', 'orange', 'green', 'darkgreen', 'blue', 'purple', 'darkpuple', 'cadetblue'];
var _dt_format_m = 'YYYY-MM-DD HH:mm:ss';
var _dt_format_h = 'DD/MM/YYYY HH:mm:ss';
var asset_icon = L.icon({
    iconUrl: 'images/marker-32.png',
    iconRetinaUrl: 'images/marker-512.png',
    iconSize: [18, 18]
});
var venue_icon = L.AwesomeMarkers.icon({
    markerColor: 'green'
});
Pace.options = {
  ajax: false
}
if(typeof($) === "undefined") {
  console.log(window.location);
  window.location = "/";
}
// Lefalet shortcuts for common tile providers - is it worth adding such 1.5kb to Leaflet core?
L.TileLayer.Common = L.TileLayer.extend({
	initialize: function (options) {
		L.TileLayer.prototype.initialize.call(this, this.url, options);
	}
});
(function() {
	var osmAttr = '&copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>';
	L.TileLayer.OpenStreetMap = L.TileLayer.Common.extend({
		url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
		options: {attribution: osmAttr}
	});
  // L.TileLayer.MapBox = L.TileLayer.Common.extend({
	// 	url: 'https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}',
	// });
}());
function _browser_geo_success(position) {
  console.log("my.pos: ["+ position.coords.latitude+ "," + position.coords.longitude+ "]")
  __centralgps__.asset.map.setView([position.coords.latitude, position.coords.longitude], 12);
}
function _browser_geo_error(positionError) {
  var msg;
  switch(positionError.code) {
    case 1: msg = __centralgps__.globalmessages.__geolocation_permission_denied; break;
    case 2: msg = __centralgps__.globalmessages.__geolocation_position_unavailable; break;
    case 3: msg = __centralgps__.globalmessages.__geolocation_timeout; break;
    default: msg = "";
  }
  $.notify({text:__centralgps__.globalmessages.__online_text, image: '<i class="md-done"></i>'}, 'success');
}
$(document).ready(function() {
try {
  //TODO: ver que cornos pasa con el datetimepicker que tiene problema con los 'locale' :-/
  moment.locale('<%= @session.language_code %>');
  var _t = moment();
  $('.date-time-picker').datetimepicker({locale: '<%= @session.language_code %>', format: _dt_format_h});
  $('#_event_asset_start_dt').val(_t.startOf('day').format(_dt_format_h));
  $('#_event_asset_finish_dt').val(_t.endOf('day').format(_dt_format_h));
  __centralgps__.asset = { position: { layer_name: null, no_pos: [] }, checkpoint: { mark: { layer_name: null }, venue: { layer_name: null } }};
  __centralgps__.asset.position.layer_name         = "<%= l10n(@session.language_code, "monitor.html", "MAP_ASSET_LAYER_NAME") %>";
  __centralgps__.asset.checkpoint.venue.layer_name = "<%= l10n(@session.language_code, "monitor.html", "MAP_VENUE_LAYER_NAME") %>"
  __centralgps__.asset.checkpoint.mark.layer_name  = "<%= l10n(@session.language_code, "monitor.html", "MAP_MARK_LAYER_NAME" ) %>";
  __centralgps__.asset.map = L.map('_asset_map').setView([0, 0], 2);
  L.Icon.Default.imagePath = '../images';
  __centralgps__.asset.map_layers = {
    "OpenStreetMap": new L.TileLayer.OpenStreetMap().addTo(__centralgps__.asset.map),
    // "Mapbox": new L.TileLayer.MapBox({ accessToken: 'pk.eyJ1IjoiY2VudHJhbGdwcyIsImEiOiJjZWE3NTUzOWM5ZmZiZTAzYmE1NTM4ZGEwOTFiMzE4OSJ9.TLvKAlHfThCDEc-DaMzglQ', id: 'centralgps.f62d543f', maxZoom: 17}),
	};
  __centralgps__.asset.map_overlays = {
    //<%= l10n(@session.language_code, "monitor.html", "MAP_ASSET_LAYER_NAME") %> : new L.LayerGroup().addTo(__centralgps__.asset.map),
    <%= l10n(@session.language_code, "monitor.html", "MAP_ASSET_LAYER_NAME") %> : new L.MarkerClusterGroup().addTo(__centralgps__.asset.map),
    <%= l10n(@session.language_code, "monitor.html", "MAP_VENUE_LAYER_NAME") %> : new L.MarkerClusterGroup().addTo(__centralgps__.asset.map),
    <%= l10n(@session.language_code, "monitor.html", "MAP_MARK_LAYER_NAME" ) %> : new L.MarkerClusterGroup().addTo(__centralgps__.asset.map),
  };
  L.control.layers(__centralgps__.asset.map_layers, __centralgps__.asset.map_overlays)
    .addTo(__centralgps__.asset.map);
  L.Control.measureControl().addTo(__centralgps__.asset.map);
  L.edgeMarker({
      icon: L.icon({ // style markers
          iconUrl: L.Icon.Default.imagePath + '/edge-arrow-marker.png',
          clickable: true,
          iconSize: [32, 32],
          iconAnchor: [24, 24]
      }),
      layerGroup: __centralgps__.asset.map_overlays[__centralgps__.asset.position.layer_name] //__centralgps__.asset.position.layer // you can specify a certain L.layerGroup to create the edge markers from.
    }).addTo(__centralgps__.asset.map);
  __centralgps__.asset.map.addControl(new L.Control.Scale());
  __centralgps__.asset.map.addControl(new L.Control.OSMGeocoder({
      collapsed: true,
      position: 'bottomright',
      text: '',
      cssclass: 'md md-search',
  }));
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(_browser_geo_success,_browser_geo_error);
  } else {
    _browser_geo_error;
  }
  $('#event_grid').bootgrid({labels: __centralgps__.bootgrid_labels});
  updateAssetGrid();
  updateVenueMap();
  updateAssetMap();
  __centralgps__.asset.refresh_interval = setInterval(function() {
    Pace.ignore(function() {
      updateAssetMap();
      updateAssetGrid();
    });
  }, 15*1000);
}
catch(err) {
  console.log(err);
}
});
function updateEvents() {
  __centralgps__.asset.map_overlays[__centralgps__.asset.checkpoint.mark.layer_name].clearLayers();
  $("#event_grid").bootgrid({labels: __centralgps__.bootgrid_labels}).bootgrid('clear');
  var init   = moment($('#_event_asset_start_dt').val(), _dt_format_h).format(_dt_format_m);
  var finish = moment($('#_event_asset_finish_dt').val(), _dt_format_h).format(_dt_format_m);
  var selected_asset = $('#_events_asset_list option:selected')
  if(selected_asset.val() == -1) {//All records
    $.each($('#_events_asset_list option'), function(k, v){
      v = $(v);
      if(v.val() != -1) {//if is NOT the All option
        var my_color = randomHexColor(); //TODO: control if the color repeats
        getAssetMarks({id: v.val(), name: v.text(), color: my_color}, init, finish);
      }
    });
  }
  else
    getAssetMarks({id: selected_asset.val(), name: selected_asset.text(),
      color: randomHexColor()}, init, finish);
}
function getAssetMarks(selected_asset, init, finish) {
  var query_string = '?asset_id=' + selected_asset.id +
        '&init_at=' + init +
        '&stop_at=' + finish;
  $.get('/monitor/assets/checkpoint/marks' + query_string,
    function(response, status, xhr) {
      if (response.status == true) {
        var mark_list = [], point_list = [];
        response.rows.forEach(function(m, idx, arr) {
          //TODO: do a template accesible and configurable from outside this func.
          var event_at = moment(m.position_at).format(_dt_format_h);
          var event_text = '<b>'+ m.venue + '</b><br/>' + m.action +
            ' - ' + m.reason  + '<br/>' + (m.comment != '' ?
            '<i><span style="text-decoration: underline">Comentario</span>: ' + m.comment + '</i>': '')
            + '<br/>';
          var asset_image = 'images/profile/_placeholder.png'
          __centralgps__.asset.list.forEach(function (asset) {
            if (selected_asset.id == asset.id) asset_image = asset.asset_image
          });
          var event_popup_html  =
            '<div class="row"><div class="col-sm-4 col-md-4 text-center">' +
            '<img src="' + asset_image + '" alt="" style="width:70px"><br/>' + selected_asset.name + '<br/>' + '</div>' +
            '<div class="col-sm-8 col-md-8"><b>'+ m.venue + '</b><br/>' + m.action +
            ' - ' + m.reason + '<br/>' + event_at +  '<br/>' + (m.comment != '' ?
            '<i><span style="text-decoration: underline">Comentario</span>: ' + m.comment + '</i>': '')
            '</div>';
          mark_list.push({ asset_name: selected_asset.name, event_text: event_text,
            event_popup_html: event_popup_html, lat: m.lat, lon: m.lon,
            event_at: event_at,
          });
          point_list.push([m.lat, m.lon]);
        });
        $("#event_grid").bootgrid('append', mark_list);
        var _rand_marker_icon = L.AwesomeMarkers.icon({
            markerColor: marker_icon_colors[Math.floor(Math.random() * marker_icon_colors.length)],
            icon: 'check'
        });
        $.each(mark_list, function(k, m) {
          __centralgps__.asset.map_overlays[__centralgps__.asset.checkpoint.mark.layer_name]
            .addLayer(L.marker([m.lat, m.lon], { mark: m, zIndexOffset: 108, icon: _rand_marker_icon })
            .bindPopup(m.event_popup_html));
        });
        console.log(selected_asset.color);
        var polyline = L.polyline(point_list, {color: selected_asset.color, noClip:true}).addTo(__centralgps__.asset.map_overlays[__centralgps__.asset.checkpoint.mark.layer_name]);
        // zoom the map to the polyline
        //__centralgps__.asset.map.fitBounds(polyline.getBounds());
      } else {
        console.log(selected_asset.name + '.updateEvents: ' + response.msg + ' - query_string: ' + query_string);
      }
  });

}
function updateAssetGrid() {
  $.get('/monitor/assets', function(response, status, xhr) {
    if (response.status == true) {
      var asset_list = [];
      response.rows.forEach(function(a, aidx, arr) {
        var asset = { id: a.id, name: a.name, asset_image: a.asset_image };
        a.positions.forEach(function(p, pidx, arr) {
          asset.address = p.address;
          asset.position_at = moment(p.position_at).format(_dt_format_h);
        });
        if(asset.position_at != null)
        asset_list.push(asset);
      });
      $("#asset_grid").bootgrid({labels: __centralgps__.bootgrid_labels}).bootgrid('clear')
        .bootgrid('append', asset_list);
      __centralgps__.asset.list = asset_list;
      //check if there is changes in the length of the loaded asset list (+1 for [All])
      if($('#_events_asset_list').find('option').length != (__centralgps__.asset.list.length + 1))
        chosenLoadSelect('_events_asset_list', __centralgps__.asset.list, 'id', 'name', null, -1, __centralgps__.globalmessages.generic._all);
    } else {
      console.log('updateAssetGrid: ' + response.msg);
    }
  });
}
function updateAssetMap() {
  $.get('/monitor/assets', function(response, status, xhr) {
    if (response.status == true) {
      if (__centralgps__.asset.map_overlays[__centralgps__.asset.position.layer_name].getLayers().length > 0) {
        response.rows.forEach(function(a, aidx, arr) {
          a.positions.forEach(function(p, pidx, arr) {
            __centralgps__.asset.map_overlays[__centralgps__.asset.position.layer_name].getLayers().forEach(function(pos) {
              if(a.id == pos.options.asset.id) {
                pos.setLatLng([p.lat, p.lon]);
                pos.getPopup().setContent('<b>' + a.name + '</b><br/>' + moment(p.position_at).format(_dt_format_h));
                //TODO: do a better optimization on which data and which positions should be updated
              }
            });
          });
        });
      } else {
        response.rows.forEach(function(a, aidx, arr) {
          if (response.rows.length - 1 == aidx)
            __centralgps__.asset.selected = a;
          a.positions.forEach(function(p, pidx, arr) {
            __centralgps__.asset.map_overlays[__centralgps__.asset.position.layer_name]
              .addLayer(L.marker([p.lat, p.lon], { asset: a, zIndexOffset: 108, icon: asset_icon })
                .bindPopup('<b>' + a.name + '</b><br/>' + moment(p.position_at).format(_dt_format_h))
                .bindLabel('<div class="text-center"><img src="' + a.asset_image + '" alt="" style="width:50px"><br/>' + a.name + "</div>", { direction: 'auto', noHide: true }));
          });
          //updateMarkMap(a);
        });
      }
    } else {
      console.log('updateAssetMap: ' + response.msg);
    }
  });
}
function updateMarkMap(asset) {
  if (asset.xtra_info != null && asset.xtra_info.checkpoint) {
    var query_string = '?asset_id=' + asset.id +
          '&init_at=' + moment().startOf('day').format(_dt_format_m) +
          '&stop_at=' + moment().endOf('day').format(_dt_format_m);
    $.get('/monitor/assets/checkpoint/marks' + query_string,
      function(response, status, xhr) {
        if (response.status == true) {
          response.rows.forEach(function(m, idx, arr) {
            __centralgps__.asset.map_overlays[__centralgps__.asset.checkpoint.mark.layer_name]
              .addLayer(L.marker([m.lat, m.lon], { mark: m, zIndexOffset: 108 })
              .bindPopup('<b>'+ asset.name + '@' + m.venue + '</b><br/>' + m.action +
              ' - ' + m.reason  + '<br/>' + m.comment  + '<br/>'+
              moment(m.position_at).format(_dt_format_h)));
          });
        } else {
          console.log(asset.name + '.updateMarkMap: ' + response.msg + ' - query_string: ' + query_string);
        }
    });
  }
}
function updateVenueMap() {
  Pace.ignore(function(){
    $.get('/monitor/venues', function(response, status, xhr) {
      if (response.status == true) {
        response.rows.forEach(function(v, vidx, arr) {
          //TODO: just update the positions on existing markers, ad only news, delete non existants
          __centralgps__.asset.map_overlays[__centralgps__.asset.checkpoint.venue.layer_name].
            addLayer(L.marker([v.lat, v.lon], { venue: v, zIndexOffset: 108, icon: venue_icon })
              .bindPopup('<b>' + v.name + '</b><br/><img src=\"' + v.venue_image + '\" class=\"thumbnail\" style="width:150px"/>'));
        });
      } else {
        console.log('.updateVenueMap: ' + response.msg);
      }
    });
  });
}
</script>
